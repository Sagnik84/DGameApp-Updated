<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>DGameApp</title>
    <script src="https://cdn.jsdelivr.net/npm/web3@latest/dist/web3.min.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f4f4f4;
        }

        header {
            background-color: #333;
            color: white;
            padding: 10px 0;
            text-align: center;
        }

        .container {
            width: 80%;
            margin: 20px auto;
            padding: 20px;
            background-color: white;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            border-radius: 8px;
        }

        .line {
            display: flex;
            justify-content: space-around;
            margin-bottom: 20px;
        }

        .circle-box {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            display: flex;
            justify-content: center;
            align-items: center;
            color: white;
            font-size: 1.5em;
            cursor: pointer;
        }

        .red {
            background-color: red;
        }

        .green {
            background-color: green;
        }

        .blue {
            background-color: blue;
        }

        .yellow {
            background-color: yellow;
            color: black;
        }

        .purple {
            background-color: purple;
        }

        .orange {
            background-color: orange;
        }

        .cyan {
            background-color: cyan;
            color: black;
        }

        .magenta {
            background-color: magenta;
        }

        .lime {
            background-color: lime;
            color: black;
        }

        .pink {
            background-color: pink;
            color: black;
        }

        .brown {
            background-color: brown;
        }

        /* Popup Styles */
        .popup {
            display: none;
            position: fixed;
            left: 50%;
            top: 50%;
            transform: translate(-50%, -50%);
            width: 300px;
            padding: 20px;
            background-color: white;
            border: 1px solid #ddd;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            z-index: 1000;
        }

        .popup-header {
            font-size: 1.2em;
            margin-bottom: 10px;
        }

        .popup input[type="number"] {
            width: 100%;
            padding: 10px;
            margin: 10px 0;
            border: 1px solid #ddd;
            border-radius: 5px;
        }

        .popup-buttons {
            display: flex;
            justify-content: space-between;
        }

        .popup button {
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            color: white;
            text-transform: uppercase;
        }

        .btn-submit {
            background-color: #4CAF50;
        }

        .btn-close {
            background-color: #f44336;
        }

        footer {
            background-color: #333;
            color: white;
            text-align: center;
            padding: 10px 0;
            position: fixed;
            bottom: 0;
            width: 100%;
        }

        /* Overlay Styles */
        .overlay {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 999;
        }

        #connectButton {
            background-color: rgb(53, 204, 53);
            position: relative;
            display: flex;
            justify-content: end;
            padding: 10px;
            border-radius: 10%;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            left: 83%;
        }

        #accountDisplay {
            background-color: aqua;
        }

        /* Styles for small and big buttons */
        #smallButton {
            border-radius: 10%;
            height: 50px;
            width: 100px;
        }

        #bigButton {
            border-radius: 10%;
            height: 50px;
            width: 100px;
        }
        .button-container {
            display: flex;
            justify-content: space-around;
            margin: 20px auto;
            padding: 20px;
        }

        .button-container button {
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            color: white;
            font-size: 1em;
            text-transform: uppercase;
            background-color: #4CAF50;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }

        .button-container button:hover {
            background-color: #45a049;
        }
        .balance-display {
            margin-top: 20px;
            text-align: center;
            font-size: 1.5em;
            color: #4CAF50;
            background-color: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }
    </style>
    <script src="https://cdn.jsdelivr.net/npm/web3@latest/dist/web3.min.js"></script>
</head>

<body>
    <header>
        <h1>DGameApp</h1>
    </header>
    <div><button id="connectButton">Connect Wallet</button></div>
    <div id="accountDisplay"></div>
    <div class="container">
        <div class="line">
            <div class="circle-box red">0</div>
            <div class="circle-box green">1</div>
            <div class="circle-box blue">2</div>
            <div class="circle-box yellow">3</div>
            <div class="circle-box purple">4</div>
        </div>
        <div class="line">
            <div class="circle-box orange">5</div>
            <div class="circle-box cyan">6</div>
            <div class="circle-box magenta">7</div>
            <div class="circle-box lime">8</div>
            <div class="circle-box pink">9</div>
        </div>
    </div>

    <div class="overlay" id="overlay"></div>
    <div class="popup" id="popup">
        <div class="popup-header">Place your bet</div>
        <div class="popup-body">
            <input type="number" id="bet-amount" placeholder="Enter bet amount">
        </div>
        <div class="popup-buttons">
            <button class="btn-submit" id="submit-bet">Submit</button>
            <button class="btn-close" id="close-popup">Close</button>
        </div>
    </div>
    <div class="container" style="display: flex; gap: 20px;">
        <button class="circle-box red" id="smallButton">Small</button>
        <button class="circle-box blue" id="bigButton">Big</button>
    </div>

    <div class="button-container">
        <button id="buymoney">Buy Money</button>
        <button id="checkBalanceButton">Check Balance</button>
        <button id="withdrawbal">Withdraw</button>
    </div>
    <div id="balance" class="balance-display"></div>
    

    <script src="https://cdn.jsdelivr.net/npm/web3/dist/web3.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/web3/1.2.7/web3.min.js"
        integrity="sha512-yAmmVkOXqtDZRaueLdmLwMB67JtaRtjFzQGiAiJKvLiFlDvq4Tzm5R6uLcOMyvPRQlXpYHdYxc5IbiCwuquhUw=="
        crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/ethers/6.13.1/ethers.umd.min.js"
        integrity="sha512-UvwB92yhzWWQstXZT31l1Fc7wv3sRG7uWBSFZ6TeJ0LIfBe8oM9p2oufp1Y5nuBAso+FYHR03WocHr5+wqWJ7A=="
        crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script>
        if (typeof web3 !== 'undefined') {
            web3 = new Web3(web3.currentProvider);
        } else {
            // If no injected web3 instance is detected, fallback to Ganache
            web3 = new Web3(new Web3.providers.HttpProvider('http://localhost:8545'));
        }
        var contactABI = [
            {
                "inputs": [
                    {
                        "internalType": "address payable",
                        "name": "_recipient",
                        "type": "address"
                    },
                    {
                        "internalType": "address",
                        "name": "_owner",
                        "type": "address"
                    }
                ],
                "stateMutability": "nonpayable",
                "type": "constructor"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "owner",
                        "type": "address"
                    }
                ],
                "name": "OwnableInvalidOwner",
                "type": "error"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "account",
                        "type": "address"
                    }
                ],
                "name": "OwnableUnauthorizedAccount",
                "type": "error"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": true,
                        "internalType": "address",
                        "name": "user",
                        "type": "address"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint256",
                        "name": "betNumber",
                        "type": "uint256"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint256",
                        "name": "randomNumber",
                        "type": "uint256"
                    },
                    {
                        "indexed": false,
                        "internalType": "bool",
                        "name": "won",
                        "type": "bool"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint256",
                        "name": "betPrice",
                        "type": "uint256"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint256",
                        "name": "smallOrBig",
                        "type": "uint256"
                    }
                ],
                "name": "BetPlaced",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": true,
                        "internalType": "address",
                        "name": "previousOwner",
                        "type": "address"
                    },
                    {
                        "indexed": true,
                        "internalType": "address",
                        "name": "newOwner",
                        "type": "address"
                    }
                ],
                "name": "OwnershipTransferred",
                "type": "event"
            },
            {
                "stateMutability": "payable",
                "type": "fallback"
            },
            {
                "inputs": [],
                "name": "COST",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "REWARD",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "uint256",
                        "name": "_betNumber",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "_betprice",
                        "type": "uint256"
                    }
                ],
                "name": "_betticket",
                "outputs": [],
                "stateMutability": "payable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "",
                        "type": "address"
                    }
                ],
                "name": "balances",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "name": "bets",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "id",
                        "type": "uint256"
                    },
                    {
                        "internalType": "address",
                        "name": "owner",
                        "type": "address"
                    },
                    {
                        "internalType": "uint256",
                        "name": "option",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "timeSpan",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "betPrice",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "smallOrbig",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "buyBalance",
                "outputs": [],
                "stateMutability": "payable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "_user",
                        "type": "address"
                    }
                ],
                "name": "checkBalance",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "depositEther",
                "outputs": [],
                "stateMutability": "payable",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "owner",
                "outputs": [
                    {
                        "internalType": "address",
                        "name": "",
                        "type": "address"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "rand",
                "outputs": [
                    {
                        "internalType": "uint256",
                        "name": "",
                        "type": "uint256"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "recipient",
                "outputs": [
                    {
                        "internalType": "address payable",
                        "name": "",
                        "type": "address"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "renounceOwnership",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "uint256",
                        "name": "_input",
                        "type": "uint256"
                    },
                    {
                        "internalType": "uint256",
                        "name": "_betmoney",
                        "type": "uint256"
                    }
                ],
                "name": "smallbig",
                "outputs": [],
                "stateMutability": "payable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "address",
                        "name": "newOwner",
                        "type": "address"
                    }
                ],
                "name": "transferOwnership",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "uint256",
                        "name": "_amount",
                        "type": "uint256"
                    }
                ],
                "name": "withdrawBalance",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "stateMutability": "payable",
                "type": "receive"
            }
        ]
        const contractAddress = "0xbcf06fc9584fc037986f7ea73f051e27409b674e";
        const contract = new web3.eth.Contract(contactABI, contractAddress);

        document.getElementById('connectButton').addEventListener('click', async () => {
            if (typeof window.ethereum !== 'undefined') {
                try {
                    // Request account access
                    const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });
                    const account = accounts[0];
                    document.getElementById('accountDisplay').innerText = `Connected Account: ${account}`;

                    // Set up Ethers provider
                    const provider = new ethers.providers.Web3Provider(window.ethereum);
                    const signer = provider.getSigner();
                    console.log('Provider:', provider);
                    console.log('Signer:', signer);
                } catch (error) {
                    console.error('Error connecting to MetaMask:', error);
                }
            } else {
                console.error('MetaMask is not installed!');
                document.getElementById('accountDisplay').innerText = 'MetaMask is not installed!';
            }
        });
        async function buyingmoney() {

            try {
                const accounts = await web3.eth.getAccounts();
                const account = accounts[0];
                await contract.methods.buyBalance().send({
                    from: accounts[0],
                    value: web3.utils.toWei("0.00001", 'ether')
                });
                alert('Balance purchased successfully!');
            } catch (error) {
                console.error(error);
            }
        }
        async function withdraw() {

            try {
                const accounts = await web3.eth.getAccounts();
                const account = accounts[0];
                await contract.methods.withdrawBalance('1000').send({
                    from: accounts[0],
                });
                alert('Balance withdraw successfully!');
            } catch (error) {
                console.error(error);
            }
        }
        async function checkBalance() {
            try {
                const accounts = await web3.eth.getAccounts();
                const account = accounts[0];
                const balance = await contract.methods.checkBalance(accounts[0]).call();
                document.getElementById('balance').innerText = `Balance: ${balance}`;
                console.log(account)
            } catch (error) {
                console.error(error);
            }
        }

        async function NumberBetting(onNumber, moneyamount) {
            const accounts = await web3.eth.getAccounts();
            const account = accounts[0];

            contract.methods._betticket(onNumber, moneyamount).send({ from: account })
                .on('transactionHash', (hash) => {
                    console.log('Transaction hash:', hash);
                })
                .on('receipt', (receipt) => {
                    console.log('Random number requested');
                })
                .on('error', (error) => {
                    console.error('Error:', error);
                });
        }
        async function smallorbig(oneOrTwo, moneyamount) {
            const accounts = await web3.eth.getAccounts();
            const account = accounts[0];

            contract.methods.smallbig(oneOrTwo, moneyamount).send({ from: account })
                .on('transactionHash', (hash) => {
                    console.log('Transaction hash:', hash);
                })
                .on('receipt', (receipt) => {
                    console.log('Random number requested');
                })
                .on('error', (error) => {
                    console.error('Error:', error);
                });
        }

        const lotteryContract = new web3.eth.Contract(contactABI, contractAddress);
        // Function to call initialize function
        async function initializeContract() {
            const accounts = await web3.eth.getAccounts();
            const owner = accounts[0];

            await lotteryContract.methods.initialize().send({ from: owner });
            console.log("Initialization event emitted.");
        }

        // Call the function after contract deployment
        initializeContract();
        // Function to listen for BetPlaced events
        function listenForBets() {
            lotteryContract.events.BetPlaced({
                filter: {}, // You can filter events here
                fromBlock: 'latest'
            }, function (error, event) {
                if (error) {
                    console.error(error);
                } else {
                    const { user, betNumber, randomNumber, won, betPrice, smallOrBig } = event.returnValues;
                     console.log(`User: ${user}, Bet Number: ${betNumber}, Random Number: ${randomNumber}, Won: ${won}, Bet Price: ${betPrice}, Small or Big: ${smallOrBig}`);                    // Display the result to the user
                    alert(`Bet Number: ${betNumber}, Random Number: ${randomNumber}, ${won ? 'You Won!' : 'You Lost!'}`);
                }
            });
        }

        // Call the function to start listening for events
        listenForBets();




        document.getElementById('buymoney').addEventListener('click', async () => {
            // Request a random number on page load
            buyingmoney();
        })
        document.getElementById('withdrawbal').addEventListener('click', async () => {
            // Request a random number on page load
            withdraw();

        })

        document.getElementById('checkBalanceButton').addEventListener('click', checkBalance);

        document.addEventListener('DOMContentLoaded', function () {
            const circleBoxes = document.querySelectorAll('.circle-box');
            const popup = document.getElementById('popup');
            const overlay = document.getElementById('overlay');
            const closePopupBtn = document.getElementById('close-popup');
            const submitBetBtn = document.getElementById('submit-bet');
            const smallButton = document.getElementById('smallButton');
            const bigButton = document.getElementById('bigButton');
            let selectedNumber;

            circleBoxes.forEach(box => {
                box.addEventListener('click', function () {
                    selectedNumber = this.innerText;
                    popup.querySelector('.popup-header').innerText = `Place your bet on number ${selectedNumber}`;
                    popup.style.display = 'block';
                    overlay.style.display = 'block';
                });
            });

            closePopupBtn.addEventListener('click', function () {
                popup.style.display = 'none';
                overlay.style.display = 'none';
            });

            submitBetBtn.addEventListener('click', function () {
                const betAmount = document.getElementById('bet-amount').value;
                if (betAmount) {
                    NumberBetting(selectedNumber, betAmount);
                    if (selectedNumber == "Small") {
                        smallorbig('1', betAmount)
                    }
                    else if (selectedNumber == "Big") {
                        smallorbig('2', betAmount)
                    }
                    alert(`You placed a bet of ₹${betAmount} on number ${selectedNumber}`);
                    popup.style.display = 'none';
                    overlay.style.display = 'none';
                } else {
                    alert('Please enter a bet amount.');
                }
            });

            overlay.addEventListener('click', function () {
                popup.style.display = 'none';
                overlay.style.display = 'none';
            });

        });

    </script>
</body>

</html>